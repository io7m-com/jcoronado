/*
 * Copyright Â© 2018 Mark Raynsford <code@io7m.com> http://io7m.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package com.io7m.jcoronado.api;

/**
 * Bitmask specifying pipeline stages.
 *
 * @see "VkPipelineStageFlagBits"
 */

@VulkanAPIEnumType(vulkanEnum = "VkPipelineStageFlagBits")
public enum VulkanPipelineStageFlag implements VulkanEnumBitmaskType
{
  /**
   * VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT specifies the stage of the pipeline where any commands are
   * initially received by the queue.
   */

  VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT(0x00000001),

  /**
   * VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT specifies the stage of the pipeline where
   * Draw/DispatchIndirect data structures are consumed. This stage also includes reading commands
   * written by vkCmdProcessCommandsNVX.
   */

  VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT(0x00000002),

  /**
   * VK_PIPELINE_STAGE_VERTEX_INPUT_BIT specifies the stage of the pipeline where vertex and index
   * buffers are consumed.
   */

  VK_PIPELINE_STAGE_VERTEX_INPUT_BIT(0x00000004),

  /**
   * VK_PIPELINE_STAGE_VERTEX_SHADER_BIT specifies the vertex shader stage.
   */

  VK_PIPELINE_STAGE_VERTEX_SHADER_BIT(0x00000008),

  /**
   * VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT specifies the tessellation control shader
   * stage.
   */

  VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT(0x00000010),

  /**
   * VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT specifies the tessellation evaluation
   * shader stage.
   */

  VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT(0x00000020),

  /**
   * VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT specifies the geometry shader stage.
   */

  VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT(0x00000040),

  /**
   * VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT specifies the fragment shader stage.
   */

  VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT(0x00000080),

  /**
   * VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT specifies the stage of the pipeline where early
   * fragment tests (depth and stencil tests before fragment shading) are performed. This stage also
   * includes subpass load operations for framebuffer attachments with a depth/stencil format.
   */

  VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT(0x00000100),

  /**
   * VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT specifies the stage of the pipeline where late
   * fragment tests (depth and stencil tests after fragment shading) are performed. This stage also
   * includes subpass store operations for framebuffer attachments with a depth/stencil format.
   */

  VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT(0x00000200),

  /**
   * VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT specifies the stage of the pipeline after
   * blending where the final color values are output from the pipeline. This stage also includes
   * subpass load and store operations and multisample resolve operations for framebuffer
   * attachments with a color format.
   */

  VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT(0x00000400),

  /**
   * VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT specifies the execution of a compute shader.
   */

  VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT(0x00000800),

  /**
   * VK_PIPELINE_STAGE_TRANSFER_BIT specifies the execution of copy commands. This includes the
   * operations resulting from all copy commands, clear commands (with the exception of
   * vkCmdClearAttachments), and vkCmdCopyQueryPoolResults.
   */

  VK_PIPELINE_STAGE_TRANSFER_BIT(0x00001000),

  /**
   * VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT specifies the final stage in the pipeline where operations
   * generated by all commands complete execution.
   */

  VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT(0x00002000),

  /**
   * VK_PIPELINE_STAGE_HOST_BIT specifies a pseudo-stage indicating execution on the host of
   * reads/writes of device memory. This stage is not invoked by any commands recorded in a command
   * buffer.
   */

  VK_PIPELINE_STAGE_HOST_BIT(0x00004000),

  /**
   * VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT specifies the execution of all graphics pipeline stages.
   */

  VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT(0x00008000),

  /**
   * VK_PIPELINE_STAGE_ALL_COMMANDS_BIT is equivalent to the logical OR of every other pipeline
   * stage flag that is supported on the queue it is used with.
   */

  VK_PIPELINE_STAGE_ALL_COMMANDS_BIT(0x00010000),

  /**
   * VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX specifies the stage of the pipeline where device-side
   * generation of commands via vkCmdProcessCommandsNVX is handled.
   */

  VK_PIPELINE_STAGE_COMMAND_PROCESS_BIT_NVX(0x00020000);

  private final int value;

  VulkanPipelineStageFlag(
    final int i)
  {
    this.value = i;
  }

  @Override
  public int value()
  {
    return this.value;
  }
}
