/*
 * Copyright Â© 2018 Mark Raynsford <code@io7m.com> http://io7m.com
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

package com.io7m.jcoronado.api;

/**
 * Bitmask specifying memory access types that will participate in a memory dependency.
 *
 * @see "VkAccessFlagBits"
 */

@VulkanAPIEnumType(vulkanEnum = "VkAccessFlagBits2")
public enum VulkanAccessFlag implements VulkanEnumBitmaskLongType
{
  /**
   * VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT
   */

  VK_ACCESS_COLOR_ATTACHMENT_READ_BIT(0x00000080L),

  /**
   * VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT
   */

  VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT(0x00000100L),

  /**
   * VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT
   */

  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT(0x00000200L),

  /**
   * VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT
   */

  VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT(0x00000400L),

  /**
   * VK_ACCESS_2_HOST_READ_BIT
   */

  VK_ACCESS_HOST_READ_BIT(0x00002000L),

  /**
   * VK_ACCESS_2_HOST_WRITE_BIT
   */

  VK_ACCESS_HOST_WRITE_BIT(0x00004000L),

  /**
   * VK_ACCESS_2_INDEX_READ_BIT
   */

  VK_ACCESS_INDEX_READ_BIT(0x00000002L),

  /**
   * VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT
   */

  VK_ACCESS_INDIRECT_COMMAND_READ_BIT(0x00000001L),

  /**
   * VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT
   */

  VK_ACCESS_INPUT_ATTACHMENT_READ_BIT(0x00000010L),

  /**
   * VK_ACCESS_2_MEMORY_READ_BIT
   */

  VK_ACCESS_MEMORY_READ_BIT(0x00008000L),

  /**
   * VK_ACCESS_2_MEMORY_WRITE_BIT
   */

  VK_ACCESS_MEMORY_WRITE_BIT(0x00010000L),

  /**
   * VK_ACCESS_2_NONE
   */

  VK_ACCESS_NONE(0L),

  /**
   * VK_ACCESS_2_SHADER_READ_BIT
   */

  VK_ACCESS_SHADER_READ_BIT(0x00000020L),

  /**
   * VK_ACCESS_2_SHADER_SAMPLED_READ_BIT
   */

  VK_ACCESS_SHADER_SAMPLED_READ_BIT(0x100000000L),

  /**
   * VK_ACCESS_2_SHADER_STORAGE_READ_BIT
   */

  VK_ACCESS_SHADER_STORAGE_READ_BIT(0x200000000L),

  /**
   * VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT
   */

  VK_ACCESS_SHADER_STORAGE_WRITE_BIT(0x400000000L),

  /**
   * VK_ACCESS_2_SHADER_WRITE_BIT
   */

  VK_ACCESS_SHADER_WRITE_BIT(0x00000040L),

  /**
   * VK_ACCESS_2_TRANSFER_READ_BIT
   */

  VK_ACCESS_TRANSFER_READ_BIT(0x00000800L),

  /**
   * VK_ACCESS_2_TRANSFER_WRITE_BIT
   */

  VK_ACCESS_TRANSFER_WRITE_BIT(0x00001000L),

  /**
   * VK_ACCESS_2_UNIFORM_READ_BIT
   */

  VK_ACCESS_UNIFORM_READ_BIT(0x00000008L),

  /**
   * VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT
   */

  VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT(0x00000004L);

  private final long value;

  VulkanAccessFlag(
    final long i)
  {
    this.value = i;
  }

  @Override
  public long value()
  {
    return this.value;
  }
}
